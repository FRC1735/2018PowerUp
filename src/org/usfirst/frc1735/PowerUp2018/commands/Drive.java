// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.PowerUp2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1735.PowerUp2018.Robot;

/**
 *
 */
public class Drive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distance;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive(double distance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distance = distance;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	// LIE for now-- treat the input as time instead of distance
    	setTimeout(m_distance);
    	m_startAngle = Robot.ahrs.getYaw();
    	kP = SmartDashboard.getNumber("TurnP", 0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	double err = Robot.ahrs.getYaw() - m_startAngle; //get our current error from our starting point
    	// We could have wrapped from -180 to +180 or vice versa, in which case the error would be extremely large.  We should never see an error larger than 180 degrees.
    	// So, if the error is larger, add/subtract 360 to get a "better" error factor
    	if (err > 180.0) {
    		err -= 360;
    	}
    	else if (err < -180) {
    		err += 360;
    	}
    	double angleCorrect = kP * err; //Build an angle correction factor
    	
    	Robot.driveTrain.arcadeDrive(0.5, -angleCorrect, false);// speed, angle, squaredInputs
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
    double kP;
    double m_startAngle;
}
