// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.PowerUp2018;

import org.usfirst.frc1735.PowerUp2018.commands.*;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton deployClamps;
    public JoystickButton retractClamps;
    public JoystickButton clampsOpen;
    public JoystickButton clampsOpen2;
    public JoystickButton clampsClose;
    public JoystickButton clampsClose2;
    public Joystick joyLeft;
    public Joystick joyRight;
    public JoystickButton opClampsDeploy;
    public JoystickButton opClampsRetract;
    public JoystickButton extendHook;
    public JoystickButton retractHook;
    public Joystick operator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operator = new Joystick(2);
        
        retractHook = new JoystickButton(operator, 7);
        retractHook.whenPressed(new HookRetract());
        extendHook = new JoystickButton(operator, 6);
        extendHook.whenPressed(new HookExtend());
        opClampsRetract = new JoystickButton(operator, 4);
        opClampsRetract.whileHeld(new ClampsRetract());
        opClampsDeploy = new JoystickButton(operator, 5);
        opClampsDeploy.whileHeld(new ClampsDeploy());
        joyRight = new Joystick(1);
        
        joyLeft = new Joystick(0);
        
        clampsClose2 = new JoystickButton(joyLeft, 2);
        clampsClose2.whenPressed(new CloseClamps());
        clampsClose = new JoystickButton(joyLeft, 1);
        clampsClose.whenPressed(new CloseClamps());
        clampsOpen2 = new JoystickButton(joyLeft, 4);
        clampsOpen2.whenPressed(new OpenClamps());
        clampsOpen = new JoystickButton(joyLeft, 3);
        clampsOpen.whenPressed(new OpenClamps());
        retractClamps = new JoystickButton(joyLeft, 7);
        retractClamps.whileHeld(new ClampsRetract());
        deployClamps = new JoystickButton(joyLeft, 8);
        deployClamps.whileHeld(new ClampsDeploy());


        // SmartDashboard Buttons
        SmartDashboard.putData("Auto RRR", new AutoRRR());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Turn: absZero", new Turn(0, 0));
        SmartDashboard.putData("Turn: abs90", new Turn(90, 0));
        SmartDashboard.putData("Turn: cube", new Turn(0, 2));
        SmartDashboard.putData("AutonomousExperiment", new AutonomousExperiment());
        SmartDashboard.putData("ResetGyro", new ResetGyro());
        SmartDashboard.putData("Turn To Cube", new TurnToCube());
        SmartDashboard.putData("DriveWithPID", new DriveWithPID());
        SmartDashboard.putData("ElevatorwithPID: load ", new ElevatorwithPID(0));
        SmartDashboard.putData("ElevatorwithPID: switch", new ElevatorwithPID(24));
        SmartDashboard.putData("ElevatorwithPID: scale", new ElevatorwithPID(66));
        SmartDashboard.putData("ElevatorwithPID: climb", new ElevatorwithPID(84));
        SmartDashboard.putData("HookExtend", new HookExtend());
        SmartDashboard.putData("HookRetract", new HookRetract());
        SmartDashboard.putData("AutoSwitchAndScale", new AutoSwitchAndScale());
        SmartDashboard.putData("AutoSwitch2x", new AutoSwitch2x());
        SmartDashboard.putData("AutoScale2x", new AutoScale2x());
        SmartDashboard.putData("AutoLineOnly", new AutoLineOnly());
        SmartDashboard.putData("AutoSwitch1x", new AutoSwitch1x());
        SmartDashboard.putData("LightsOn", new LightsOn());
        SmartDashboard.putData("LightsOff", new LightsOff());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // Add some more Commands with a null argument.  these will grab data from the SmartDashboard.
        SmartDashboard.putData("ElevatorwithPID: FromSD", new ElevatorwithPID());
        SmartDashboard.putData("Turn: FromSD", new Turn()); 
        SmartDashboard.putData("DriveToCube", new DriveWithPID(true)); // Drive using the camera-calculated distance to the cube
        
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoyLeft() {
        return joyLeft;
    }

    public Joystick getJoyRight() {
        return joyRight;
    }

    public Joystick getOperator() {
        return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    

    // This function is used to change the default joystick button mappings based on the joystick type that is connected.
    public void setJoystickButtonMap() {
    	// Driver Left
 		// If an Xbox controller, try using the two sticks on controller 0 (Left side) instead of using two joysticks		
		if (DriverStation.getInstance().getJoystickIsXbox(joyLeft.getPort())) {// if Xbox, it should be the only driver input and will be on input0.
			System.out.println("Configuring buttons for Xbox on JoyLeft");
	        clampsClose = new JoystickButton(joyLeft, 1);        // A
	        clampsClose.whenPressed(new CloseClamps());
	        clampsClose2 = new JoystickButton(joyLeft, 2);       // B
	        clampsClose2.whenPressed(new CloseClamps());
	        clampsOpen = new JoystickButton(joyLeft, 3);         // X
	        clampsOpen.whenPressed(new OpenClamps());
	        clampsOpen2 = new JoystickButton(joyLeft, 4);        // Y
	        clampsOpen2.whenPressed(new OpenClamps());
	        retractClamps = new JoystickButton(joyLeft, 7);      // Back
	        retractClamps.whileHeld(new ClampsRetract());
	        deployClamps = new JoystickButton(joyLeft, 8);       // Start
	        deployClamps.whileHeld(new ClampsDeploy());
		}
		else if (DriverStation.getInstance().getJoystickName(joyLeft.getPort()).equals("Logitech Dual Action")) { //Similar to the Xbox in behavior, but with different raw buttons/axes
			System.out.println("Configuring buttons for Logitech on JoyLeft");
	        clampsClose = new JoystickButton(joyLeft, 2);        // Button 2
	        clampsClose.whenPressed(new CloseClamps());
	        clampsClose2 = new JoystickButton(joyLeft, 3);       // Button 3
	        clampsClose2.whenPressed(new CloseClamps());
	        clampsOpen = new JoystickButton(joyLeft, 1);         // Button 1
	        clampsOpen.whenPressed(new OpenClamps());
	        clampsOpen2 = new JoystickButton(joyLeft, 4);        // Button 4
	        clampsOpen2.whenPressed(new OpenClamps());
	        retractClamps = new JoystickButton(joyLeft, 9);      // Button 9
	        retractClamps.whileHeld(new ClampsRetract());
	        deployClamps = new JoystickButton(joyLeft, 10);       // Button 10
	        deployClamps.whileHeld(new ClampsDeploy());
		}
		else { // Assume Attack3 Joystick (may match RobotBuilder defaults above... but maybe not?)
			System.out.println("Configuring buttons for Attack3 on JoyLeft");
	        clampsClose = new JoystickButton(joyLeft, 1);        // Trigger
	        clampsClose.whenPressed(new CloseClamps());
	        clampsClose2 = new JoystickButton(joyLeft, 9);       // Bottom Backmost right
	        clampsClose2.whenPressed(new CloseClamps());
	        clampsOpen = new JoystickButton(joyLeft, 2);         // Backmost thumb
	        clampsOpen.whenPressed(new OpenClamps());
	        clampsOpen2 = new JoystickButton(joyLeft, 8);        // Bottom Backmost left
	        clampsOpen2.whenPressed(new OpenClamps());
	        retractClamps = new JoystickButton(joyLeft, 5);      // Rightmost (inward) thumb
	        retractClamps.whileHeld(new ClampsRetract());
	        deployClamps = new JoystickButton(joyLeft, 4);       // Leftmost (outward) thumb
	        deployClamps.whileHeld(new ClampsDeploy());
		}
    	
		// Operator Joystick
		if (DriverStation.getInstance().getJoystickIsXbox(operator.getPort())) {// if Xbox.
			System.out.println("Configuring buttons for Xbox on Operator");
	        // We expect Operator to ALWAYS use the Attack3 Joystick.  This is just a safety in case an xbox controller gets assigned to the wrong port.
	        retractHook = new JoystickButton(operator, 1);      // A
	        retractHook.whenPressed(new HookRetract());
	        extendHook = new JoystickButton(operator, 2);       // B
	        extendHook.whenPressed(new HookExtend());
	        opClampsRetract = new JoystickButton(operator, 3);  // X
	        opClampsRetract.whileHeld(new ClampsRetract());
	        opClampsDeploy = new JoystickButton(operator, 4);   // Y
	        opClampsDeploy.whileHeld(new ClampsDeploy());
		}
		else if (DriverStation.getInstance().getJoystickName(operator.getPort()).equals("Logitech Dual Action")) { //Similar to the Xbox in behavior, but with different raw buttons/axes
			System.out.println("Configuring buttons for Logitech on Operator");
	        // We expect Operator to ALWAYS use the Attack3 Joystick.  This is just a safety in case a logitech controller gets assigned to the wrong port.
	        retractHook = new JoystickButton(operator, 2);       // Button 2
	        retractHook.whenPressed(new HookRetract());
	        extendHook = new JoystickButton(operator, 3);        // Button 3
	        extendHook.whenPressed(new HookExtend());
	        opClampsRetract = new JoystickButton(operator, 1);    // Button 1
	        opClampsRetract.whileHeld(new ClampsRetract());
	        opClampsDeploy = new JoystickButton(operator, 4);     // Button 4
	        opClampsDeploy.whileHeld(new ClampsDeploy());
		}
		else { // Assume Attack3 Joystick (may match RobotBuilder defaults above... but maybe not?)
			System.out.println("Configuring buttons for Attack3 on Operator");
	        retractHook = new JoystickButton(operator, 7);       // Bottom Left backmost
	        retractHook.whenPressed(new HookRetract());
	        extendHook = new JoystickButton(operator, 6);        // Bottom Left forwardmost
	        extendHook.whenPressed(new HookExtend());
	        opClampsRetract = new JoystickButton(operator, 4);   // Leftmost (inward) thumb
	        opClampsRetract.whileHeld(new ClampsRetract());
	        opClampsDeploy = new JoystickButton(operator, 5);    // Rightmost (outward) thumb
	        opClampsDeploy.whileHeld(new ClampsDeploy());
		}
    }

    // Functions to map the joystick/axis/value based on the joystick type that is connected
    public double getDriverArcadeX() {
		// If Driver Left is an Xbox controller, Drive is on the left thumb		
		if (DriverStation.getInstance().getJoystickIsXbox(joyLeft.getPort())) {// if Xbox, it's probably the only input and would be on input0.
			//System.out.println("LeftX:  Xbox");
			return joyLeft.getRawAxis(0);  // Left stick X
		}
		// If logitech, Drive is on the left thumb
		else if (DriverStation.getInstance().getJoystickName(joyLeft.getPort()).equals("Logitech Dual Action")) { //Similar to the Xbox in behavior, but with different raw buttons/axes
			//System.out.println("LeftX:  Logitech");
			return joyLeft.getRawAxis(0);  // Left stick X
		}
		// Default:  Assume Attack3, and use right joystick
		else {
			//System.out.println("LeftX:  Attack3");
			return joyRight.getX();
		}
    }

    // Functions to map the joystick/axis/value based on the joystick type that is connected
    public double getDriverArcadeY() {
		// If Driver Left is an Xbox controller, Drive is on the left thumb		
		if (DriverStation.getInstance().getJoystickIsXbox(joyLeft.getPort())) {// if Xbox, it's probably the only input and would be on input0.
			//System.out.println("LeftY:  Xbox");
			return joyLeft.getRawAxis(1);  // Left stick Y
		}
		// If logitech, Drive is on the left thumb
		else if (DriverStation.getInstance().getJoystickName(joyLeft.getPort()).equals("Logitech Dual Action")) { //Similar to the Xbox in behavior, but with different raw buttons/axes
			//System.out.println("Y:  Logitech");
			return joyLeft.getRawAxis(1);  // Left stick Y
		}
		// Default:  Assume Attack3, and use right joystick (yes, right... not left)
		else {
			//System.out.println("LeftY:  Attack3");
			return joyRight.getY();
		}
    }

}

