// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.PowerUp2018.subsystems;

import org.usfirst.frc1735.PowerUp2018.Robot;
import org.usfirst.frc1735.PowerUp2018.RobotMap;
import org.usfirst.frc1735.PowerUp2018.commands.*;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteFeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard; // Because RobotBuilder keeps leaving it out of the autogenerated code
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
/**
 *
 */
public class DriveTrain extends Subsystem implements PIDOutput {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftMotor = RobotMap.driveTrainLeftMotor;
    private final WPI_TalonSRX leftFollower = RobotMap.driveTrainLeftFollower;
    private final SpeedControllerGroup speedControllerGroupLeft = RobotMap.driveTrainSpeedControllerGroupLeft;
    private final WPI_TalonSRX rightMotor = RobotMap.driveTrainRightMotor;
    private final WPI_TalonSRX rightFollower = RobotMap.driveTrainRightFollower;
    private final SpeedControllerGroup speedControllerGroupRight = RobotMap.driveTrainSpeedControllerGroupRight;
    private final DifferentialDrive differentialDrive1 = RobotMap.driveTrainDifferentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	// Print the current gyro heading
        SmartDashboard.putNumber(   "Raw Angle",         Robot.ahrs.getAngle()); //cumulative angle over time
        SmartDashboard.putNumber(   "Rotation Rate",     Robot.ahrs.getRate()); // Rotation rate in deg/sec
        SmartDashboard.putNumber(   "Yaw",               Robot.ahrs.getYaw()); //-180 to +180 from last zeroed yaw setting
        
        //Print the acceleration vector(s)
        SmartDashboard.putNumber(   "Y Accel",           Robot.ahrs.getWorldLinearAccelY());    
        
        //Grab the Limelight data stream
        double x = tx.getDouble(0);
        SmartDashboard.putNumber("Cube Angle", x);
        double y = ty.getDouble(0);
        double area = ta.getDouble(0);
        double cameraAngle = 56.0;
        double targetHeight = 5.5;
        double cameraHeight = 44.5;
        double d;
        d = ((Math.tan(Math.toRadians(cameraAngle + y))) * (cameraHeight - targetHeight));
        SmartDashboard.putNumber("Cube Distance", d);

    }

    public void drivetrainInit() {
    	// Do initialization that cannot be done in the constructor because robot.init isn't executed yet so we don't have a gyro instance.
    	
    	//-----------------------------
    	// Software PID Subsystem Initialization
    	//-----------------------------
    	//PID values.values  F is feed-forward for maintaining rotational velocity.
    	// The last two args are input source and output object (our PIDwrite() function)
        drivelineController = new PIDController(kLargeP, kLargeI, kLargeD, kLargeF, Robot.ahrs, this);
        drivelineController.setInputRange(-180.0f, 180.0f); // WHY IS THIS -180 to +180 RATHER THAN 0-360????
        drivelineController.setOutputRange(-0.75, 0.75); // What is the allowable range of values to send to the output (our motor rotation)
        drivelineController.setAbsoluteTolerance(kToleranceDegrees); // How close do we have to be in order to say we have reached the target?
        // Robot can spin in full circle so angle might wrap from 0 to 360.
        // 'Continuous' allows us to follow that wrap to get from 359 to 0, rather than going counterclockwise a full circle to get there.
        drivelineController.setContinuous(true);        
        /* Add the PID Controller to the Test-mode dashboard, allowing manual  */
        /* tuning of the Turn Controller's P, I and D coefficients.            */
        /* Typically, only the P value needs to be modified.                   */
        LiveWindow.addActuator("DriveSystem", "RotateController", drivelineController);
        
        //Expose these to the SmartDashboard (plus some debug turn parameters) for DEBUG ONLY:
    	SmartDashboard.putBoolean("TurnAbsolute", false); // Assume relative
    	SmartDashboard.putNumber("TurnAngle", 0); // Assuming relative, zero means no change.
    	SmartDashboard.putNumber("TurnP", kLargeP);
    	SmartDashboard.putNumber("TurnI", kLargeI);
    	SmartDashboard.putNumber("TurnD", kLargeD);
    	SmartDashboard.putNumber("TurnErr", kToleranceDegrees);

    	//Hook up to the Limelight
        table = NetworkTableInstance.getDefault().getTable("limelight");
        tx = table.getEntry("tx");
        ty = table.getEntry("ty");
        ta = table.getEntry("ta");
        
        // Chose the sensor and direction
    	leftMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 0); // extra args are:  primary closed loop, timeout in ms
    	leftMotor.setSensorPhase(true); //Assumeinversion
    	rightMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 0);
    	rightMotor.setSensorPhase(true); //Assume no inversion.
    	// Followers do not have sensors.
    	
    	// Voltage compensation mode should make 100% output request scale to 12V regardless of battery voltage.
    	// (if battery voltage is less than 12v it will just put all available voltage out)
    	leftMotor.enableVoltageCompensation(true);
    	rightMotor.enableVoltageCompensation(true);

    	// Encoder setup:  Since we are using the CTRE Mag Encoders, we do not
    	// need to configure anything further
        
    }
    
    public void motionMagicInit() {
    	// This function puts the drivetrain in Motion Magic control mode.
    	// this allows us to use the Talon HW PID for positional control,
    	// while still obeying the trapezoidal motion profile for acceleration
    	// and maximum velocity.
    	
    	// See full code example at https://github.com/CrossTheRoadElec/FRC-Examples-STEAMWORKS/blob/master/JAVA_MotionMagicExample/src/org/usfirst/frc/team217/robot/Robot.java
    	    	
		/* set the peak and nominal outputs, -1 to 1 in percentage of nominal voltage (even if battery voltage is higher)*/
    	leftMotor.configNominalOutputForward(0.1, 0);
    	leftMotor.configNominalOutputReverse(-0.1, 0);
    	leftMotor.configPeakOutputForward(1.0,0);
    	leftMotor.configPeakOutputReverse(-1.0,0);
    	//rightMotor.configNominalOutputForward(0.2, 0);
    	//rightMotor.configNominalOutputReverse(-0.2, 0);
//    	rightMotor.configPeakOutputForward(1.0,0);
//    	rightMotor.configPeakOutputReverse(-1.0,0);
//    	leftFollower.configNominalOutputForward(0.2, 0);
//    	leftFollower.configNominalOutputReverse(-0.2, 0);
//    	leftFollower.configPeakOutputForward(1.0,0);
//    	leftFollower.configPeakOutputReverse(-1.0,0);
//    	rightFollower.configNominalOutputForward(0.2, 0);
//    	rightFollower.configNominalOutputReverse(-0.2, 0);
//    	rightFollower.configPeakOutputForward(1.0,0);
//    	rightFollower.configPeakOutputReverse(-1.0,0);
    	    
    	// Right motor must spin opposite of left when in temporary slave mode
    	rightMotor.setInverted(true);
    	rightFollower.setInverted(true);
   	
    	/* set closed loop gains in slot0 - see documentation */
    	leftMotor.selectProfileSlot(0,0);
//    	rightMotor.selectProfileSlot(0,0);
//    	leftFollower.selectProfileSlot(0,0);
//    	rightFollower.selectProfileSlot(0,0);
    	
		/* set acceleration and vcruise velocity - see documentation */
    	leftMotor.configMotionCruiseVelocity(2700, 0); // 2700 encoder units per 100ms interval is about 395 RPM
//    	rightMotor.configMotionCruiseVelocity(2700, 0);
//    	leftFollower.configMotionCruiseVelocity(2700, 0);
//    	rightFollower.configMotionCruiseVelocity(2700, 0);
    	
    	leftMotor.configMotionAcceleration(8100, 0); //want to get to full speed in 1/3 sec, so same as cruise velocity
//    	rightMotor.configMotionAcceleration(2700, 0); 
//    	leftFollower.configMotionAcceleration(2700, 0);
//    	rightFollower.configMotionAcceleration(2700, 0);

    	// Set the closed loop ramp as well (time in seconds to full speed; timeout)
    	leftMotor.configClosedloopRamp(0.333, 0); //want to get to full speed in 1/3 sec, so same as cruise velocity
    	leftMotor.configOpenloopRamp(0.333, 0); //want to get to full speed in 1/3 sec, so same as cruise velocity
    	
    	// Put the talons in "Brake" mode
    	leftMotor.setNeutralMode(NeutralMode.Brake);
    	rightMotor.setNeutralMode(NeutralMode.Brake);
    	leftFollower.setNeutralMode(NeutralMode.Brake);
    	rightFollower.setNeutralMode(NeutralMode.Brake);
   	     	    	
    	//Set the mode to Magic (for the master; slaves match for now).  Second arg is the setpoint.
        leftMotor.set(ControlMode.Position /*MotionMagic*/, 0);
        rightMotor.follow(leftMotor); //Broken sensor.  :'-(
        leftFollower.follow(leftMotor);
        rightFollower.follow(leftMotor);
        
        // Zero out the relative sensors
        leftMotor.setSelectedSensorPosition(0,0,0);// position, PIDidx (0= normal), timeout in ms
        rightMotor.setSelectedSensorPosition(0,0,0);// position, PIDidx (0= normal), timeout in ms

        //Set the closed-loop allowable error.  Empirically on no-load, error was <50 units.
        leftMotor.configAllowableClosedloopError(0, kToleranceDistUnits, 0); // index, err, timeout in ms
        rightMotor.configAllowableClosedloopError(0, kToleranceDistUnits, 0); // index, err, timeout in ms
//        leftFollower.configAllowableClosedloopError(0, 50, 0); // index, err, timeout in ms
//        rightFollower.configAllowableClosedloopError(0, 50, 0); // index, err, timeout in ms
    }

public void setDriveMode() {
	 // Return PID mode to the normal drive-by-joystick behavior:
    leftMotor.set(ControlMode.PercentOutput, 0); // Mode, setpoint
    rightMotor.set(ControlMode.PercentOutput, 0); // Mode, setpoint
    leftFollower.set(ControlMode.PercentOutput, 0); // Mode, setpoint
    rightFollower.set(ControlMode.PercentOutput, 0); // Mode, setpoint
	// Right motor must spin opposite of left when in temporary slave mode
	rightMotor.setInverted(false);
	// Right motor must spin opposite of left when in temporary slave mode
	rightFollower.setInverted(false);

}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcadeDrive(double moveValue, double rotateValue, boolean squaredInputs) {
    	// This function is a wrapper in case we need to do anything special before calling the final arcadeDrive.
    	// The WPI library assumes the turn parameter is clockwise = positive.
    	// New for 2018, the WPILIB drivetrain is redesigned and assumes positive == forwards so no Y-axis sign shenanigans anymore! 
    	//SmartDashboard.putNumber("MotorOut", rotateValue);
    	
    	differentialDrive1.arcadeDrive(moveValue, rotateValue, squaredInputs);
    }
    
    public void tankDrive(double leftValue, double rightValue, boolean squaredInputs) {
    	// This function is a wrapper in case we need to do anything special before calling the final TankDrive.
    	// New for 2018, the WPILIB drivetrain is redesigned and assumes positive == forwards so no Y-axis sign shenanigans anymore!
    	
    	differentialDrive1.tankDrive(leftValue, rightValue, squaredInputs);
    	
    }
    
    public void selectableDriveWithJoysticks(Joystick joyLeft, Joystick joyRight) {
		// Extract the joystick values
		double joyLeftX, joyLeftY, joyRightX, joyRightY;

		// If an Xbox controller, try using the two sticks on controller 0 (Left side) instead of using two joysticks		
		if (DriverStation.getInstance().getJoystickIsXbox(joyLeft.getPort())) {// if Xbox, it's probably the only input and would be on input0.
			joyLeftX = joyLeft.getRawAxis(0);  // Left stick X
			joyLeftY = joyLeft.getRawAxis(1);  // Left stick Y
			joyRightX = joyLeft.getRawAxis(4); // Right stick X
			joyRightY = joyLeft.getRawAxis(5); // Right stick Y
		}
		else {
			joyLeftX  = joyLeft.getX();
			joyLeftY  = joyLeft.getY();
			joyRightX = joyRight.getX();
			joyRightY = joyRight.getY();
		}

		// Print the raw joystick inputs
		//System.out.println("Raw Values:  joyLeftY="+joyLeftY+" joyLeftX="+joyLeftX + " joyRightY="+joyRightY+" joyRightX="+joyRightX);
		
		// Apply the 'dead zone' guardband to the joystick inputs:
		// Centered joysticks may not actually read as zero due to spring variances.
		// Therfore, remove any small values as being "noise".
		double joystickDeadzone = SmartDashboard.getNumber("Joystick Deadzone", 0); // default to zero if entry not found
		if (Math.abs(joyLeftX) < joystickDeadzone)
			joyLeftX = 0;
		if (Math.abs(joyLeftY) < joystickDeadzone)
			joyLeftY = 0;
		if (Math.abs(joyRightX) < joystickDeadzone)
			joyRightX = 0;
		if (Math.abs(joyRightY) < joystickDeadzone)
			joyRightY = 0;

		// Choose whether we square the inputs (for increased joystick sensitivity at low speeds) based on SmartDashboard settings.
    	boolean squaredInputs = SmartDashboard.getBoolean("SquaredInputs", true); // Default to true if setting not found

		// Find out which operating mode is requested and send the appropriate joystick values to the appropriate sub-function
		// We could access the local mode variable, but better to use an accessor function to hide implementation details
		if (this.isInTankMode()) {
			// We call the "local" wrapper, which uses programming assumptions that FWD = positive.		
			// However, because the joystick Y axis "up" is negative, we swap the sign on both left and right
			this.tankDrive(-joyLeftY, -joyRightY, squaredInputs); // Tank uses Y axis of left and right joysticks as independent left and right wheel controls
		}
		// Because we may add more drive modes in the future, use specific accessor functions rather than relying on assumptions of implementation.
		else if (this.isInArcadeMode()) {
			// We call the "local" wrapper, which uses programming assumptions that FWD = positive and Clockwise = positive.			
			// However, because the joystick Y axis "up" is negative, we swap the sign on that Y axis only.
			this.arcadeDrive(-joyRightY, joyRightX, squaredInputs); // Arcade uses one joystick:  Y axis for forward/backwards, and X axis for spin cw+/ccw-
		}
		// Error check.  If we have corrupted the mode somehow, and don't match any option, default to tank
		else {
			System.err.println("selectableDrive error:  Unknown mode detected.  Defaulting to Tank.");
			this.setTankMode();
			this.tankDrive(-joyLeftY, -joyRightY, squaredInputs); // See rules above for sign calculation.
		}
    }
    
    // Function to stop the robot
    public void stop() {
    	differentialDrive1.stopMotor();
    }
    
    // Function to put us in tank mode (and update Smart Dashboard indicator)
    // Hides boolean implementation from users
    public void setTankMode() {
    	m_isInTankMode = true;
    	SmartDashboard.putString("Drivetrain Mode", "TANK");
    }
    
    // Function to hide boolean implmentation from users
    public boolean isInTankMode() {
    	return m_isInTankMode;
    }
    
    // Function to put us in tank mode (and update Smart Dashboard indicator)
   public void setArcadeMode() {
    	m_isInTankMode = false;
    	SmartDashboard.putString("Drivetrain Mode", "ARCADE");
    }
    
   // Function to hide boolean implmentation from users
   public boolean isInArcadeMode() {
	   // Because current implentation is a single boolean, if we aren't in tank mode...we're in arcade mode.
	   return !m_isInTankMode;
   }
   
   @Override
   /* This function is invoked periodically by the PID Controller, */
   /* based upon navX MXP yaw angle input and PID Coefficients.    */
   public void pidWrite(double output) {
       m_rotateToAngleRate = output;
   }
   
   public void setSmallPID() {
	   double d = SmartDashboard.getNumber("TurnD", 0);
	   drivelineController.setPID(kSmallP, kSmallI, d, kSmallF);
	   drivelineController.setOutputRange(-kSmallPIDOutputMax, kSmallPIDOutputMax); // What is the allowable range of values to send to the output (our motor rotation)
   }
   
   public void setMedPID() {
	   drivelineController.setPID(kMedP, kMedI, kMedD, kMedF);
	   drivelineController.setOutputRange(-kMedPIDOutputMax, kMedPIDOutputMax); // What is the allowable range of values to send to the output (our motor rotation)
   }

   public void setLargePID() {
	   drivelineController.setPID(kLargeP, kLargeI, kLargeD, kLargeF);
	   drivelineController.setOutputRange(-kLargePIDOutputMax, kLargePIDOutputMax); // What is the allowable range of values to send to the output (our motor rotation)
   }

	
    public double getTx() {
    	return tx.getDouble(0);
    }

    public double getTy() {
    	return ty.getDouble(0);
    }


	// Member Variables
    boolean m_isInTankMode = true; // true = tank; false = arcade
    public boolean absolute = true; //functions can use this as a parameter to the Turn command
    public boolean relative = false; //functions can use this as a parameter to the Turn command

    //--------------------------------
    // SW PID subsystem variables
    //--------------------------------
    public PIDController drivelineController; // Use this PID controller to accomplish turns and track straight when driving forward.
    public double m_rotateToAngleRate; // PID output tells us how much to rotate to reach the desired setpoint target.
    
    //Limelight connections
    NetworkTable table;
    NetworkTableEntry tx;
    NetworkTableEntry ty;
    NetworkTableEntry ta;

    /* The following Software PID Controller coefficients will need to be tuned */
    /* to match the dynamics of your drive system.  Note that the      */
    /* SmartDashboard in Test mode has support for helping you tune    */
    /* controllers by displaying a form where you can enter new P, I,  */
    /* and D constants and test the mechanism.                         */
    
    static final double kToleranceDegrees = 0.25; // Stop if we are within this many degrees of the setpoint.
    public static final int kToleranceDistUnits = 50; // stop if we are within this many encoder units of our setpoint.

    static final double kLargeP = 0.0165;
    static final double kLargeI = 0.001504;
    static final double kLargeD = 0.00;
    static final double kLargeF = 0.00;
    public static final double kLargePIDOutputMax = 0.55; // Max motor output in large PID mode

    public static final double kMedPIDLimit = 10.0; // Errors smaller than this number of degrees should use the medium PID profile
    static final double kMedP = 0.25; //use a very large (relative to normal) P to guarantee max motor output
    static final double kMedI = 0.00;
    static final double kMedD = 0.05;
    static final double kMedF = 0.00;
    public static final double kMedPIDOutputMax = 0.225; // Max motor output in small PID mode

    public static final double kSmallPIDLimit = 1.5; // Errors smaller than this number of degrees should use the small PID profile
    static final double kSmallP = 0.5; //use a very large (relative to normal) P to guarantee max motor output
    static final double kSmallI = 0.00;
    static final double kSmallD = 0.05;
    static final double kSmallF = 0.00;
    public static final double kSmallPIDOutputMax = 0.1475; // Max motor output in small PID mode

}

