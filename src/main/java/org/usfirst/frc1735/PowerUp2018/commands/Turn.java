// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.PowerUp2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1735.PowerUp2018.Robot;
import org.usfirst.frc1735.PowerUp2018.RobotMap;
import org.usfirst.frc1735.PowerUp2018.subsystems.DriveTrain;

/**
 *
 */
public class Turn extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_angle;
    private int m_mode;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Turn(double angle, int mode) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_angle = angle;
        m_mode = mode;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Calling Turn without any argument pulls turn angle from the SmartDashboard
    public Turn() {
    	m_getDataFromSmartDashboard = true;
        requires(Robot.driveTrain);
		SmartDashboard.putString("PID Mode", "TBD");

    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	if (m_getDataFromSmartDashboard) {
    		// If we called this command without arguments, we need to get them from the SmartDashboard.
        	if (SmartDashboard.getBoolean("TurnAbsolute", true)) {
        		m_mode = DriveTrain.kAbsolute; 
        	}
        	else {
        		m_mode = DriveTrain.kRelative;
        	}
        	
           	m_angle      = SmartDashboard.getNumber("TurnAngle", 0); // Assuming relative, zero means no change.
    	}
    	else if (m_mode == DriveTrain.kCamera) {    		
    		m_angle = calcCubeAngle(); // Use our heuristics to capture a cube on the camera and calculate its relative angle from our current position
    	}

    	
    	// Convert any relative angles to field-absolute, if necessary
    	if ((m_mode == DriveTrain.kRelative) ||
    		(m_mode == DriveTrain.kCamera)) {
    		// We are in RELATIVE mode here (either explicitly, or implicitly in camera mode)
        	double startAbsAngle = Robot.ahrs.getYaw(); // Get our current abs angle
        	m_targetAbsAngle = startAbsAngle + m_angle; // calc our new abs angle based on the relative turn we received as a param
        	if (m_targetAbsAngle > 180.0) {
        		m_targetAbsAngle = m_targetAbsAngle - 360.0;// Correct the angle to lie within -180:180 
        	}
        	if (m_targetAbsAngle < -180.0) {
        		m_targetAbsAngle = m_targetAbsAngle + 360.0;// Correct the angle to lie within -180:180 
        	}
    	}
    	else {
    		//We are in abs mode here
    		m_targetAbsAngle = m_angle; //abs angle was passed to us
    	}
    	
    	// Finally, enable the turn controller
    	Robot.driveTrain.drivelineController.setSetpoint(m_targetAbsAngle);	
    	Robot.driveTrain.drivelineController.enable();
    	System.out.println("Mode = " + m_mode + " ReqAngle= " + m_angle + " absTarget= " + m_targetAbsAngle);
    	// Reset the iteration counter (for reduced printing)
    	m_exeCount = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (m_mode == DriveTrain.kCamera) {
    		// in camera mode, we always recalculate the target based on the current camera image
        	double startAbsAngle = Robot.ahrs.getYaw(); // Get our current abs angle
        	double camAngle = calcCubeAngle(); // Use our heuristics to capture a cube on the camera and calculate its relative angle from our current position

        	m_targetAbsAngle = startAbsAngle + camAngle; // calc our new abs angle based on camera input
        	if (m_targetAbsAngle > 180.0) {
        		m_targetAbsAngle = m_targetAbsAngle - 360.0;// Correct the angle to lie within -180:180 
        	}
        	if (m_targetAbsAngle < -180.0) {
        		m_targetAbsAngle = m_targetAbsAngle + 360.0;// Correct the angle to lie within -180:180 
        	}
        	
        	// update the setpoint 
        	Robot.driveTrain.drivelineController.setSetpoint(m_targetAbsAngle);
        	
        	// increment a counter
        	m_exeCount++;
    	}

    	
    	double err = Robot.driveTrain.drivelineController.getError();
    	// For small errors (say, less than 5 degrees), run the PID with a low max and a high P-- this gets us a pretty constant but slow speed for small adjustments
    	// This avoids the "small P -> small motor values -> rely on very slow I values to get to the target
    	if (Math.abs(err) < Robot.driveTrain.kSmallTurnPIDLimit /*degrees*/) {
    		Robot.driveTrain.setSmallTurnPID();
    		SmartDashboard.putString("PID Mode", "Small");
    	}
    	else if (Math.abs(err) < Robot.driveTrain.kMedTurnPIDLimit /*degrees*/) {
    		Robot.driveTrain.setMedTurnPID();
    		SmartDashboard.putString("PID Mode", "Med");
    	}
    	else {
    		Robot.driveTrain.setLargeTurnPID(); // Otherwise use the normal PID values  
    		SmartDashboard.putString("PID Mode", "Large");
    	}
    	RobotMap.driveTrainDifferentialDrive1.tankDrive(Robot.driveTrain.m_rotateToAngleRate, -Robot.driveTrain.m_rotateToAngleRate, false);
    	SmartDashboard.putNumber("MotorOut", Robot.driveTrain.m_rotateToAngleRate);
    	SmartDashboard.putNumber("PIDErr", err);
    }


    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
//        return (Robot.driveTrain.drivelineController.onTarget()) && // Ask controller if our current position is "close enough"
//        		(Math.abs(Robot.driveTrain.m_rotateToAngleRate) < Robot.driveTrain.kSmallTurnPIDOutputMax); // And the motors are low to no output, so we aren't actively oscillating around the target value
    	
    	// terminate when we have been "onTarget" for a minimum number of iterations
    	if (Robot.driveTrain.drivelineController.onTarget())
    		m_onTargetCount++; // if we are on target, increment the counter
    	else
    		m_onTargetCount = 0; // If we are not on target, reset the counter
    	
    	return (m_onTargetCount > 10);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.drivelineController.disable(); // Stop the turn controller
    	Robot.driveTrain.stop(); // Stop the motors;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
    
	// Filter mode 1:  We start at the scale, looking back towards the switch
	//                 We are ~10 degrees CCW of the target cube and probably 6-7 feet away
	//                 We are approaching CW to the cube.
	//                 The second cube in the row (of cubes against the switch wall), when we are centered on the first cube, is about 15 degrees CW of us.
	//                 Therefore, we don't want to target anything > 12 degrees CW, nor anything CCW of us.
	/**
	 * @param tx
	 * @param angleLimit
	 * @return
	 */
	public double filter1(double tx, double angleLimit) {
		double camAngle;
		boolean do_print = (m_exeCount % 25) == 0;
		System.out.print("iter: " + m_exeCount + " Tx: " + tx);
		if ((tx >=0) && (tx < angleLimit)) {
			System.out.print(" (Chose Tx)");
			camAngle      = tx;
		}
		else {
			// We need to grab the individual tx0, tx1, tx2 and look at those.
			// The limelight might have locked onto the cube that's to the right of our target cube, so we need to look
			// at all the raw values
			double tx0 = Robot.driveTrain.getTx0();
			double tx1 = Robot.driveTrain.getTx1();
			double tx2 = Robot.driveTrain.getTx2();
			if (do_print) System.out.print(" Tx0 " + tx0 + " Tx1 " + tx1 + " Tx2 " + tx2);
			if ((tx0 >=0) && (tx0 < angleLimit)) {
				if (do_print) System.out.print(" (Chose Tx0)");
				camAngle      = tx0;
			}
			else if ((tx1 >=0) && (tx1 < angleLimit)) {
				if (do_print) System.out.print(" (Chose Tx1)");
				camAngle      = tx1;
			}
			else if ((tx2 >=0) && (tx2 < angleLimit)) {
				if (do_print) System.out.print(" (Chose Tx2)");
				camAngle      = tx2;
			}
			// If we haven't found ANYTHING at this point, just use the TX if it's valid
			else if ((Robot.driveTrain.getTv() == 1) && (tx >=0)) {
				if (do_print) System.out.print(" (Chose fallthrough Tx)");
				camAngle      = tx; 
			}
			else {
				// If nothing else, try rotating 5 degrees to the right to see if something comes into view
				if (do_print) System.out.print(" (Chose to Seek)");
				camAngle = 5; // "Seek mode"
			}
		}
		if (do_print) System.out.println(); //newline
		return camAngle;
	}

	// Multiple cubes may be in view in our autonomous, from the row against the switch fence.
	// Our heuristic is to choose the "outermost" detected cube,
	// but not "outwards" from our current position (to avoid possibly capturing a sidewall reflection)
	/**
	 * @param tx
	 * @param angleLimit
	 * @return
	 */
	public double calcCubeAngle() {
		double angleLimit = 15;
		double camAngle;
		boolean do_print = (m_exeCount % 25) == 0;
		// Ignore the "selected" tx target entirely.
		// We need to grab the individual tx0, tx1, tx2 and look at those.
		// The limelight might have locked onto the cube that's to the right of our target cube, so we need to look
		// at all the raw values
    	double tx  = Robot.driveTrain.getTx();
		double tx0 = Robot.driveTrain.getTx0() * 27; // Raw values are in screen-normalized coordinates.  Camera FOV is 54 degrees
		double tx1 = Robot.driveTrain.getTx1() * 27;
		double tx2 = Robot.driveTrain.getTx2() * 27;
		if  (do_print) System.out.print("iter " + m_exeCount + " Tx " + tx + " Tx0 " + tx0 + " Tx1 " + tx1 + " Tx2 " + tx2);
		// assuming field-right coding here; use SmartDashboard to invert directions if we are on the left side of the field.
		boolean onRightSide =
				(Robot.fieldPositionChooser.getSelected() == "Far Right") ||
        		(Robot.fieldPositionChooser.getSelected() == "Mid Right");
		
		if (Robot.driveTrain.getTv() == 1) {
			if (false /*Math.abs(tx) < 15*/) { // if our current lock is close to centered, use it
				camAngle = tx;
			}
			else {
				// If we have ANY target detected
				if (onRightSide) {
					// Check for TX0.
					if ((tx0 < tx1) && (tx0 < tx2)) //&&  // Is it the farthest left (outermost)?
							//(tx0 > 0))                     // and is to our right (so not a field wall reflection)
					{
						if  (do_print) System.out.print(" (Chose Tx0)");
						camAngle      = tx0;
					}
					// If not, check tx1
					else if ((tx1 < tx0) && (tx1 < tx2)) //&&  // Is it the farthest left (outermost)?
							//(tx1 > 0))                     // and is to our right (so not a field wall reflection)
					{
						if  (do_print) System.out.print(" (Chose Tx1)");
						camAngle      = tx1;
					}
					// If not, check tx2
					else if ((tx2 < tx0) && (tx2 < tx1)) //&&  // Is it the farthest left (outermost)?
							//(tx2 > 0))                     // and is to our right (so not a field wall reflection)
					{
						if  (do_print) System.out.print(" (Chose Tx2)");
						camAngle      = tx2;
					}
					else
					{
						// Apparently, none of them are to our right.  Punt, and just use whatever we DID detect.
						if  (do_print) System.out.print(" (Chose fallthrough Tx)");
						camAngle      = tx;
					}
				}
				else { // Must be on left side.  Same code, but all comparisons are inverted
					// Check for TX0.
					if ((tx0 > tx1) && (tx0 > tx2)) //&&  // Is it the farthest right (outermost)?
							//(tx0 < 0))                     // and is to our left (so not a field wall reflection)
					{
						if  (do_print) System.out.print(" (Chose Tx0)");
						camAngle      = tx0;
					}
					// If not, check tx1
					else if ((tx1 > tx0) && (tx1 > tx2)) //&&  // Is it the farthest right (outermost)?
							//(tx1 < 0))                     // and is to our left (so not a field wall reflection)
					{
						if  (do_print) System.out.print(" (Chose Tx1)");
						camAngle      = tx1;
					}
					// If not, check tx2
					else if ((tx2 > tx0) && (tx2 > tx1)) //&&  // Is it the farthest right (outermost)?
							//(tx2 < 0))                     // and is to our left (so not a field wall reflection)
					{
						if  (do_print) System.out.print(" (Chose Tx2)");
						camAngle      = tx2;
					}
					else
					{
						// Apparently, none of them are to our right.  Punt, and just use whatever we DID detect.
						if  (do_print) System.out.print(" (Chose fallthrough Tx)");
						camAngle      = tx;
					}

				} //left side
			} // tx close enough
		} // tx valid
		else {
			// Here, the camera didn't find ANY targets.
			// Time for an even bigger punt...
			// try rotating 5 degrees inwards to the center of the field to see if something comes into view
			if  (do_print) System.out.print(" (Chose to Seek)");
			if (onRightSide)
				camAngle = 5; // "Seek mode"
			else
				camAngle = -5; // "Seek mode"
		}

		if  (do_print) System.out.println(); //newline
		return camAngle;
	}

    
    //Member variables
    double m_targetAbsAngle; //the field relative angle that we want to end up at
    boolean m_getDataFromSmartDashboard = false;
    double m_onTargetCount = 0; // counter for determining whether we have settled on our target.
    int m_exeCount = 0; // Counter for number of times we have been called (i.e. every 20 ms it increments)
}
