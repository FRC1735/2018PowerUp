// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.PowerUp2018.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc1735.PowerUp2018.Robot;
import org.usfirst.frc1735.PowerUp2018.subsystems.*;

/**
 *
 */
public class AutoSwitchAndScale extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoSwitchAndScale() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	// reset the gyro because we don't know how much it drifted between power-on and the start of the match.
    	// Assuming we are square with the Driverstation Wall, this should properly define the Zero Degree point...
    	addSequential(new ResetGyro());
    	// Drive over to the switch
    	addSequential(new DriveWithPID(194)); //drive forward (in inches)
    	addSequential(new ConditionalTurn(-26.6, DriveTrain.kAbsolute));
    	addSequential(new DriveWithPID(30.4));
    	addSequential(new ConditionalTurn(0, DriveTrain.kAbsolute));
    	// deploy the claw before moving the elevator
    	// For now, without limit switches, do it for a set time period.  Eventually limit switches will stop the motor in the "right" position.
    	///addSequential(new MoveClamps(1), 0.5); // direction, timeout
    	// Raise the elevator to delivery position
    	///addSequential(new ElevatorMove(1), Robot.elevator.kTimeLoadToScale); //ElevatorwithPID(Robot.elevator.kScalePosition)); // in inches
    	//Final approach to the scale
    	addSequential(new DriveWithPID(25));
    	// Drop the cube
    	///addSequential(new OpenClamps());
    	// Back up a bit and turn around
    	///addSequential(new DriveWithPID(-5));
    	// Return the elevator to loading position
    	// addSequential(new ElevatorMove(-1), Robot.elevator.kTimeScaleToLoad)); //ElevatorwithPID(Robot.elevator.kLoadPosition)); // in inches
    	///addSequential(new ConditionalTurn(175, DriveTrain.kAbsolute));
    	// Center on the cube that we (hopefully) see
    	///addSequential(new ConditionalTurn(0, DriveTrain.kCamera)); // angle is not used; it is grabbed from the camera
    	// Drive to the cube
    	///addSequential(new DriveWithPID(DriveTrain.kUseCamera));
    	// Grab the cube
    	///addSequential(new CloseClamps());
    	// Raise the elevator to switch delivery position
    	///addSequential(new ElevatorMove(1), Robot.elevator.kTimeLoadToSwitch); //ElevatorwithPID(Robot.elevator.kSwitchPosition)); //Something more than 18.75 inches... TBD
    	// Drive forward until the bumpers touch.  Bumpers are about 6" deep, so cube-bumper is about 6"
    	///addSequential(new DriveWithPID(6));
    	// Drop the cube
    	///addSequential( new OpenClamps());
    	// Done!
    	

    } 
}
